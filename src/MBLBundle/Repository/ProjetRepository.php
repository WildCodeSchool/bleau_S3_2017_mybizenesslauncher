<?php

namespace MBLBundle\Repository;

/**
 * ProjetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjetRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $locale
     * @return array
     *
     *
     */

    public function countProjects($locale)
    {
        $query = $this->createQueryBuilder('p')
            ->select('COUNT(p)')
            ->where('p.lngp = :locale')
            ->setParameter('locale', $locale)
            ->getQuery();

        return $query->getSingleScalarResult();
    }
    public function myfindOneById($id, $locale)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p.description' . $locale . ' as description',
            'p.id as id','p.titre' .$locale. ' as titre',
            'p.localisation as localisation',
            'p.dateCreation as dateCreation',
            'p.siteInternet' . $locale . ' as siteInternet',
            'p.ebustaUrl' . $locale . ' as ebustaUrl')
            ->join('p.typeDeProjet', 'tp')
            ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
            ->join('p.secteur', 's')
            ->addSelect('s.secteurActivite' . $locale . ' as secteur')

            ->where('p.id = :pid')
            ->setParameter('pid', $id)
        ;

        $projets = $qb->getQuery()->getResult();


        foreach ($projets as $key => $projet)
        {
//            Get metier et création d'un sous tableau'
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.profilsrecherches', 'r')
                ->join('r.metier', 'm')
                ->select('m.metier' . $locale . ' as metier')
                ->setParameter('id', $projet['id'])
            ;
            $projets[$key]['metier'] = $qb->getQuery()->getResult();

//            Get fichier si défini et si null
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.fichier', 'f')
                ->select('f.photo')
                ->setParameter('id', $projet['id'])
            ;
            $projets[$key]['fichier'] = $qb->getQuery()->getResult();

//            Get vill si défini et si null
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->select('p.ville')
                ->setParameter('id', $projet['id'])
            ;
            $projets[$key]['ville'] = $qb->getQuery()->getOneOrNullResult();
        }

        /*dump($projets); die();*/

        return $projets;
    }

    public function findLastProjets4($locale)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p.description' . $locale . ' as description','p.id as id','p.titre' .$locale. ' as titre',
            'p.localisation as localisation')
            ->join('p.typeDeProjet', 'tp')
            ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
            ->join('p.secteur', 's')
            ->addSelect('s.secteurActivite' . $locale . ' as secteur')
            ->where('p.lngp = :locale')
            ->setParameter('locale', $locale)
            ->setMaxResults(4)
            ->orderBy('p.id', 'DESC')
        ;

        $projets = $qb->getQuery()->getResult();


        foreach ($projets as $key => $projet)
        {
//            Get metier et création d'un sous tableau'
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.profilsrecherches', 'r')
                ->join('r.metier', 'm')
                ->select('m.metier' . $locale . ' as metier')
                ->setParameter('id', $projet['id'])
            ;
            $projets[$key]['metier'] = $qb->getQuery()->getResult();

//            Get fichier si défini et si null
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.fichier', 'f')
                ->select('f.photo')
                ->setParameter('id', $projet['id'])
            ;
            $projets[$key]['fichier'] = $qb->getQuery()->getResult();

//            Get vill si défini et si null
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->select('p.ville')
                ->setParameter('id', $projet['id'])
            ;
            $projets[$key]['ville'] = $qb->getQuery()->getOneOrNullResult();
        }

        /*dump($projets); die();*/

        return $projets;
    }

    public function myfindallMyProjects($id, $locale)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
            ->join('p.typeDeProjet', 'tp')
            ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
            ->join('p.secteur', 's')
            ->addSelect('s.secteurActivite' . $locale . ' as secteur')
            ->join('p.profils', 'pro')
            ->where('pro = :pr')
            ->setParameter('pr', $id)
            ->andwhere('p.lngp = :locale')
            ->setParameter('locale', $locale)
            ->orderBy('p.id', 'DESC');

        $projets = $qb->getQuery()->getResult();



        foreach ($projets as $key => $projet) {
            // Get metier et création d'un sous tableau'
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.profilsrecherches', 'r')
                ->join('r.metier', 'm')
                ->select('m.metier' . $locale . ' as metier')
                ->setParameter('id', $projet['id']);
            $projets[$key]['metier'] = $qb->getQuery()->getResult();

            // Get fichier si défini et si null
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.fichier', 'f')
                ->select('f.photo')
                ->setParameter('id', $projet['id']);
            $projets[$key]['fichier'] = $qb->getQuery()->getResult();
        }
        return $projets;
    }


    public function findAllDesc($locale, $nombreParPage, $page)

    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
            ->join('p.typeDeProjet', 'tp')
            ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
            ->join('p.secteur', 's')
            ->addSelect('s.secteurActivite' . $locale . ' as secteur')
            ->where('p.lngp = :locale')
            ->setParameter('locale', $locale)
            ->orderBy('p.id', 'DESC')
            ->setFirstResult(($page-1) * $nombreParPage)
            // Ainsi que le nombre d'articles à afficher
            ->setMaxResults($nombreParPage);

        $projets = $qb->getQuery()->getResult();

        foreach ($projets as $key => $projet) {
            // Get metier et création d'un sous tableau'
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.profilsrecherches', 'r')
                ->join('r.metier', 'm')
                ->select('m.metier' . $locale . ' as metier')
                ->setParameter('id', $projet['id']);
            $projets[$key]['metier'] = $qb->getQuery()->getResult();

            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.fichier', 'f')
                ->select('f.photo')
                ->setParameter('id', $projet['id'])
            ;
            $projets[$key]['fichier'] = $qb->getQuery()->getResult();


        }
        return $projets;
    }




    public function myfindProjetByVDeux($idSec, $nombreParPage, $page, $idTyp, $Loc, $locale)
    {

        if(is_numeric($idSec) && is_numeric($idTyp) && !empty($Loc))
        {
            $qb = $this->createQueryBuilder('p');
            $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
                ->join('p.typeDeProjet', 'tp')
                ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
                ->join('p.secteur', 's')
                ->addSelect('s.secteurActivite' . $locale . ' as secteur')
                ->where('tp.id = :typId')
                ->setParameter('typId', $idTyp)
                ->andWhere('s.id = :secId')
                ->setParameter('secId', $idSec)
                ->andWhere('p.localisation = :Loc')
                ->setParameter('Loc', $Loc)
                ->andwhere('p.lngp = :locale')
                ->setParameter('locale', $locale)
                ->orderBy('p.id', 'DESC')
                ->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);
            $projets = $qb->getQuery()->getResult();

        }
        elseif (!empty($Loc))
        {
            if(is_numeric($idSec) || is_numeric($idTyp)) {
                if (is_numeric($idSec)) {
                    $qb = $this->createQueryBuilder('p');
                    $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
                        ->join('p.typeDeProjet', 'tp')
                        ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
                        ->join('p.secteur', 's')
                        ->addSelect('s.secteurActivite' . $locale . ' as secteur')
                        ->andWhere('p.localisation = :Loc')
                        ->setParameter('Loc', $Loc)
                        ->andWhere('s.id = :secId')
                        ->setParameter('secId', $idSec)
                        ->andwhere('p.lngp = :locale')
                        ->setParameter('locale', $locale)
                        ->orderBy('p.id', 'DESC')
                        ->setFirstResult(($page-1) * $nombreParPage)
                        // Ainsi que le nombre d'articles à afficher
                        ->setMaxResults($nombreParPage);
                    $projets = $qb->getQuery()->getResult();
                }
                else
                {
                    $qb = $this->createQueryBuilder('p');
                    $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
                        ->join('p.typeDeProjet', 'tp')
                        ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
                        ->join('p.secteur', 's')
                        ->addSelect('s.secteurActivite' . $locale . ' as secteur')
                        ->where('tp.id = :typId')
                        ->setParameter('typId', $idTyp)
                        ->andWhere('p.localisation = :Loc')
                        ->setParameter('Loc', $Loc)
                        ->andwhere('p.lngp = :locale')
                        ->setParameter('locale', $locale)
                        ->orderBy('p.id', 'DESC')
                        ->setFirstResult(($page-1) * $nombreParPage)
                        // Ainsi que le nombre d'articles à afficher
                        ->setMaxResults($nombreParPage);
                    $projets = $qb->getQuery()->getResult();

                }
            }
            elseif (!is_numeric($idSec) && !is_numeric($idTyp) && !empty($Loc)) {
                $qb = $this->createQueryBuilder('p');
                $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
                    ->join('p.typeDeProjet', 'tp')
                    ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
                    ->join('p.secteur', 's')
                    ->addSelect('s.secteurActivite' . $locale . ' as secteur')
                    ->where('p.localisation = :typId')
                    ->setParameter('typId', $Loc)
                    ->andwhere('p.lngp = :locale')
                    ->setParameter('locale', $locale)
                    ->orderBy('p.id', 'DESC')
                    ->setFirstResult(($page-1) * $nombreParPage)
                    // Ainsi que le nombre d'articles à afficher
                    ->setMaxResults($nombreParPage);
                $projets = $qb->getQuery()->getResult();
            }

        }
        elseif (is_numeric($idSec) && is_numeric($idTyp))
        {
            $qb = $this->createQueryBuilder('p');
            $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
                ->join('p.typeDeProjet', 'tp')
                ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
                ->join('p.secteur', 's')
                ->addSelect('s.secteurActivite' . $locale . ' as secteur')
                ->where('tp.id = :typId')
                ->setParameter('typId', $idTyp)
                ->andWhere('s.id = :secId')
                ->setParameter('secId', $idSec)
                ->andwhere('p.lngp = :locale')
                ->setParameter('locale', $locale)
                ->orderBy('p.id', 'DESC')
                ->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);
            $projets = $qb->getQuery()->getResult();
        }
        elseif (is_numeric($idSec) || is_numeric($idTyp))
        {
            if(is_numeric($idSec))
            {
//
                $qb = $this->createQueryBuilder('p');
                $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
                    ->join('p.typeDeProjet', 'tp')
                    ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
                    ->join('p.secteur', 's')
                    ->addSelect('s.secteurActivite' . $locale . ' as secteur')
                    ->andWhere('s.id = :secId')
                    ->setParameter('secId', $idSec)
                    ->andwhere('p.lngp = :locale')
                    ->setParameter('locale', $locale)
                    ->orderBy('p.id', 'DESC')
                    ->setFirstResult(($page-1) * $nombreParPage)
                    // Ainsi que le nombre d'articles à afficher
                    ->setMaxResults($nombreParPage);
                $projets = $qb->getQuery()->getResult();
            }
            else
            {

                $qb = $this->createQueryBuilder('p');
                $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
                    ->join('p.typeDeProjet', 'tp')
                    ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
                    ->join('p.secteur', 's')
                    ->addSelect('s.secteurActivite' . $locale . ' as secteur')
                    ->where('tp.id = :typId')
                    ->setParameter('typId', $idTyp)
                    ->andwhere('p.lngp = :locale')
                    ->setParameter('locale', $locale)
                    ->orderBy('p.id', 'DESC')
                    ->setFirstResult(($page-1) * $nombreParPage)
                    // Ainsi que le nombre d'articles à afficher
                    ->setMaxResults($nombreParPage);
                $projets = $qb->getQuery()->getResult();
            }
        }

//        //Sinon on récupérera tous les projets
        else
        {
            $qb = $this->createQueryBuilder('p');
            $qb->select('p.description' . $locale . ' as description', 'p.id as id', 'p.titre' . $locale . ' as titre', 'p.localisation as localisation')
                ->join('p.typeDeProjet', 'tp')
                ->addSelect('tp.typeDeProjet' . $locale . ' as typeDeProjet')
                ->join('p.secteur', 's')
                ->addSelect('s.secteurActivite' . $locale . ' as secteur')
                ->where('p.lngp = :locale')
                ->setParameter('locale', $locale)
                ->orderBy('p.id', 'DESC')
                ->setFirstResult(($page-1) * $nombreParPage)
                // Ainsi que le nombre d'articles à afficher
                ->setMaxResults($nombreParPage);
            $projets = $qb->getQuery()->getResult();


        }
        foreach ($projets as $key => $projet) {
            // Get metier et création d'un sous tableau'
            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.profilsrecherches', 'r')
                ->join('r.metier', 'm')
                ->select('m.metier' . $locale . ' as metier')
                ->setParameter('id', $projet['id']);
            $projets[$key]['metier'] = $qb->getQuery()->getResult();

            $qb = $this->createQueryBuilder('p');
            $qb->where('p.id = :id')
                ->join('p.fichier', 'f')
                ->select('f.photo')
                ->setParameter('id', $projet['id'])
            ;
            $projets[$key]['fichier'] = $qb->getQuery()->getResult();


        }

        return $projets;
    }

}
